{
    "AwsResources": [
        {
            "name": "AWS::Amplify",
            "resourceTypes": [
                "AWS::Amplify::App",
                "AWS::Amplify::Branch",
                "AWS::Amplify::Domain",
                "AWS::AmplifyUIBuilder::Component",
                "AWS::AmplifyUIBuilder::Form",
                "AWS::AmplifyUIBuilder::Theme"
        ]
        },
        {
            "name": "AWS::ApiGateway",
            "resourceTypes": [
                "AWS::ApiGateway::Account",
                "AWS::ApiGateway::ApiKey",
                "AWS::ApiGateway::Authorizer",
                "AWS::ApiGateway::BasePathMapping",
                "AWS::ApiGateway::ClientCertificate",
                "AWS::ApiGateway::Deployment",
                "AWS::ApiGateway::DocumentationPart",
                "AWS::ApiGateway::DocumentationVersion",
                "AWS::ApiGateway::DomainName",
                "AWS::ApiGateway::GatewayResponse",
                "AWS::ApiGateway::Method",
                "AWS::ApiGateway::Model",
                "AWS::ApiGateway::RequestValidator",
                "AWS::ApiGateway::Resource",
                "AWS::ApiGateway::RestApi",
                "AWS::ApiGateway::Stage",
                "AWS::ApiGateway::UsagePlan",
                "AWS::ApiGateway::UsagePlanKey",
                "AWS::ApiGateway::VpcLink",
                "AWS::ApiGatewayV2::Api",
                "AWS::ApiGatewayV2::ApiGatewayManagedOverrides",
                "AWS::ApiGatewayV2::ApiMapping",
                "AWS::ApiGatewayV2::Authorizer",
                "AWS::ApiGatewayV2::Deployment",
                "AWS::ApiGatewayV2::DomainName",
                "AWS::ApiGatewayV2::Integration",
                "AWS::ApiGatewayV2::IntegrationResponse",
                "AWS::ApiGatewayV2::Model",
                "AWS::ApiGatewayV2::Route",
                "AWS::ApiGatewayV2::RouteResponse",
                "AWS::ApiGatewayV2::Stage",
                "AWS::ApiGatewayV2::VpcLink"
            ]
        },
        {
            "name": "AWS::AppConfig",
            "resourceTypes": [
                "AWS::AppConfig::Application",
                "AWS::AppConfig::ConfigurationProfile",
                "AWS::AppConfig::Deployment",
                "AWS::AppConfig::DeploymentStrategy",
                "AWS::AppConfig::Environment",
                "AWS::AppConfig::Extension",
                "AWS::AppConfig::ExtensionAssociation",
                "AWS::AppConfig::HostedConfigurationVersion"
            ]
        },
        {
            "name": "AWS::AppFlow",
            "resourceTypes": [
                "AWS::AppFlow::Connector",
                "AWS::AppFlow::ConnectorProfile",
                "AWS::AppFlow::Flow"
            ]
        },
        {
            "name": "AWS::AppIntegrations",
            "resourceTypes": [
                "AWS::AppIntegrations::Application",
                "AWS::AppIntegrations::DataIntegration",
                "AWS::AppIntegrations::EventIntegration"
            ]
        },
        {
            "name": "AWS::ApplicationAutoScaling",
            "resourceTypes": [
                "AWS::ApplicationAutoScaling::ScalableTarget",
                "AWS::ApplicationAutoScaling::ScalingPolicy"
            ]
        },
        {
            "name": "AWS::AppMesh",
            "resourceTypes": [
                "AWS::AppMesh::GatewayRoute",
                "AWS::AppMesh::Mesh",
                "AWS::AppMesh::Route",
                "AWS::AppMesh::VirtualGateway",
                "AWS::AppMesh::VirtualNode",
                "AWS::AppMesh::VirtualRouter",
                "AWS::AppMesh::VirtualService"
            ]
        },
        {
            "name": "AWS::AppRunner",
            "resourceTypes": [
                "AWS::AppRunner::AutoScalingConfiguration",
                "AWS::AppRunner::ObservabilityConfiguration",
                "AWS::AppRunner::Service",
                "AWS::AppRunner::VpcConnector",
                "AWS::AppRunner::VpcIngressConnection"
            ]
        },
        {
            "name": "AWS::AppStream",
            "resourceTypes": [
                "AWS::AppStream::AppBlock",
                "AWS::AppStream::AppBlockBuilder",
                "AWS::AppStream::Application",
                "AWS::AppStream::ApplicationEntitlementAssociation",
                "AWS::AppStream::ApplicationFleetAssociation",
                "AWS::AppStream::DirectoryConfig",
                "AWS::AppStream::Entitlement",
                "AWS::AppStream::Fleet",
                "AWS::AppStream::ImageBuilder",
                "AWS::AppStream::Stack",
                "AWS::AppStream::StackFleetAssociation",
                "AWS::AppStream::StackUserAssociation",
                "AWS::AppStream::User"
            ]
        },
        {
            "name": "AWS::AppSync",
            "resourceTypes": [
                "AWS::AppSync::ApiCache",
                "AWS::AppSync::ApiKey",
                "AWS::AppSync::DataSource",
                "AWS::AppSync::DomainName",
                "AWS::AppSync::DomainNameApiAssociation",
                "AWS::AppSync::FunctionConfiguration",
                "AWS::AppSync::GraphQLApi",
                "AWS::AppSync::GraphQLSchema",
                "AWS::AppSync::Resolver",
                "AWS::AppSync::SourceApiAssociation"
            ]
        },
        {
            "name": "AWS::ARCZonalShift",
            "resourceTypes": [
                "AWS::ARCZonalShift::ZonalAutoshiftConfiguration"
            ]
        },
        {
            "name": "Alexa::ASK",
            "resourceTypes": [
                "Alexa::ASK::Skill"
            ]
        },
        {
            "name": "AWS::Athena",
            "resourceTypes": [
                "AWS::Athena::CapacityReservation",
                "AWS::Athena::DataCatalog",
                "AWS::Athena::NamedQuery",
                "AWS::Athena::PreparedStatement",
                "AWS::Athena::WorkGroup"
            ]
        },
        {
            "name": "AWS::AuditManager",
            "resourceTypes": [
                "AWS::AuditManager::Assessment"
            ]
        },
        {
            "name": "AWS::AutoScalingPlans",
            "resourceTypes": [
                "AWS::AutoScalingPlans::ScalingPlan"
            ]
        },
        {
            "name": "AWS::B2BI",
            "resourceTypes": [
                "AWS::B2BI::Capability",
                "AWS::B2BI::Partnership",
                "AWS::B2BI::Profile",
                "AWS::B2BI::Transformer"
            ]
        },
        {
            "name": "AWS::Backup",
            "resourceTypes": [
                "AWS::Backup::BackupPlan",
                "AWS::Backup::BackupSelection",
                "AWS::Backup::BackupVault",
                "AWS::Backup::Framework",
                "AWS::Backup::ReportPlan",
                "AWS::Backup::RestoreTestingPlan",
                "AWS::Backup::RestoreTestingSelection",
                "AWS::BackupGateway::Hypervisor"
            ]
        },
        {
            "name": "AWS::Batch",
            "resourceTypes": [
                "AWS::Batch::ComputeEnvironment",
                "AWS::Batch::JobDefinition",
                "AWS::Batch::JobQueue",
                "AWS::Batch::SchedulingPolicy"
            ]
        },
        {
            "name": "AWS::Bedrock",
            "resourceTypes": [
                "AWS::Bedrock::Agent",
                "AWS::Bedrock::AgentAlias",
                "AWS::Bedrock::DataSource",
                "AWS::Bedrock::Guardrail",
                "AWS::Bedrock::GuardrailVersion",
                "AWS::Bedrock::KnowledgeBase"
            ]
        },
        {
            "name": "AWS::BillingConductor",
            "resourceTypes": [
                "AWS::BillingConductor::BillingGroup",
                "AWS::BillingConductor::CustomLineItem",
                "AWS::BillingConductor::PricingPlan",
                "AWS::BillingConductor::PricingRule"
            ]
        },
        {
            "name": "AWS::Budgets",
            "resourceTypes": [
                "AWS::Budgets::Budget",
                "AWS::Budgets::BudgetsAction"
            ]
        },
        {
            "name": "AWS::CertificateManager",
            "resourceTypes": [
                "AWS::CertificateManager::Account",
                "AWS::CertificateManager::Certificate"
            ]
        },
        {
            "name": "AWS::Chatbot",
            "resourceTypes": [
                "AWS::Chatbot::MicrosoftTeamsChannelConfiguration",
                "AWS::Chatbot::SlackChannelConfiguration"
            ]
        },
        {
            "name": "AWS::CleanRooms",
            "resourceTypes": [
                "AWS::CleanRooms::AnalysisTemplate",
                "AWS::CleanRooms::Collaboration",
                "AWS::CleanRooms::ConfiguredTable",
                "AWS::CleanRooms::ConfiguredTableAssociation",
                "AWS::CleanRooms::Membership",
                "AWS::CleanRooms::PrivacyBudgetTemplate",
                "AWS::CleanRoomsML::TrainingDataset"
            ]
        },
        {
            "name": "AWS::Cloud9",
            "resourceTypes": [
                "AWS::Cloud9::EnvironmentEC2"
            ]
        },
        {
            "name": "AWS::CloudFormation",
            "resourceTypes": [
                "AWS::CloudFormation::CustomResource",
                "AWS::CloudFormation::HookDefaultVersion",
                "AWS::CloudFormation::HookTypeConfig",
                "AWS::CloudFormation::HookVersion",
                "AWS::CloudFormation::Macro",
                "AWS::CloudFormation::ModuleDefaultVersion",
                "AWS::CloudFormation::ModuleVersion",
                "AWS::CloudFormation::PublicTypeVersion",
                "AWS::CloudFormation::Publisher",
                "AWS::CloudFormation::ResourceDefaultVersion",
                "AWS::CloudFormation::ResourceVersion",
                "AWS::CloudFormation::Stack",
                "AWS::CloudFormation::StackSet",
                "AWS::CloudFormation::TypeActivation",
                "AWS::CloudFormation::WaitCondition",
                "AWS::CloudFormation::WaitConditionHandle"
            ]
        },
        {
            "name": "AWS::CloudFront",
            "resourceTypes": [
                "AWS::CloudFront::CachePolicy",
                "AWS::CloudFront::CloudFrontOriginAccessIdentity",
                "AWS::CloudFront::ContinuousDeploymentPolicy",
                "AWS::CloudFront::Distribution",
                "AWS::CloudFront::Function",
                "AWS::CloudFront::KeyGroup",
                "AWS::CloudFront::KeyValueStore",
                "AWS::CloudFront::MonitoringSubscription",
                "AWS::CloudFront::OriginAccessControl",
                "AWS::CloudFront::OriginRequestPolicy",
                "AWS::CloudFront::PublicKey",
                "AWS::CloudFront::RealtimeLogConfig",
                "AWS::CloudFront::ResponseHeadersPolicy",
                "AWS::CloudFront::StreamingDistribution"
            ]
        },
        {
            "name": "AWS::ServiceDiscovery",
            "resourceTypes": [
                "AWS::ServiceDiscovery::HttpNamespace",
                "AWS::ServiceDiscovery::Instance",
                "AWS::ServiceDiscovery::PrivateDnsNamespace",
                "AWS::ServiceDiscovery::PublicDnsNamespace",
                "AWS::ServiceDiscovery::Service"
            ]
        },
        {
            "name": "AWS::CloudTrail",
            "resourceTypes": [
                "AWS::CloudTrail::Channel",
                "AWS::CloudTrail::EventDataStore",
                "AWS::CloudTrail::ResourcePolicy",
                "AWS::CloudTrail::Trail"
            ]
        },
        {
            "name": "AWS::CloudWatch",
            "resourceTypes": [
                "AWS::CloudWatch::Alarm",
                "AWS::CloudWatch::AnomalyDetector",
                "AWS::CloudWatch::CompositeAlarm",
                "AWS::CloudWatch::Dashboard",
                "AWS::CloudWatch::InsightRule",
                "AWS::CloudWatch::MetricStream"
            ]
        },
        {
            "name": "AWS::ApplicationInsights",
            "resourceTypes": [
                "AWS::ApplicationInsights::Application"
            ]
        },
        {
            "name": "AWS::Evidently",
            "resourceTypes": [
                "AWS::Evidently::Experiment",
                "AWS::Evidently::Feature",
                "AWS::Evidently::Launch",
                "AWS::Evidently::Project",
                "AWS::Evidently::Segment"
            ]
        },
        {
            "name": "AWS::InternetMonitor",
            "resourceTypes": [
                "AWS::InternetMonitor::Monitor"
            ]
        },
        {
            "name": "AWS::Logs",
            "resourceTypes": [
                "AWS::Logs::AccountPolicy",
                "AWS::Logs::Delivery",
                "AWS::Logs::DeliveryDestination",
                "AWS::Logs::DeliverySource",
                "AWS::Logs::Destination",
                "AWS::Logs::LogAnomalyDetector",
                "AWS::Logs::LogGroup",
                "AWS::Logs::LogStream",
                "AWS::Logs::MetricFilter",
                "AWS::Logs::QueryDefinition",
                "AWS::Logs::ResourcePolicy",
                "AWS::Logs::SubscriptionFilter"
            ]
        },
        {
            "name": "AWS::Synthetics",
            "resourceTypes": [
                "AWS::Synthetics::Canary",
                "AWS::Synthetics::Group"
            ]
        },
        {
            "name": "AWS::CodeArtifact",
            "resourceTypes": [
                "AWS::CodeArtifact::Domain",
                "AWS::CodeArtifact::PackageGroup",
                "AWS::CodeArtifact::Repository"
            ]
        },
        {
            "name": "AWS::CodeBuild",
            "resourceTypes": [
                "AWS::CodeBuild::Fleet",
                "AWS::CodeBuild::Project",
                "AWS::CodeBuild::ReportGroup",
                "AWS::CodeBuild::SourceCredential"
            ]
        },
        {
            "name": "AWS::CodeCommit",
            "resourceTypes": [
                "AWS::CodeCommit::Repository"
            ]
        },
        {
            "name": "AWS::CodeConnections",
            "resourceTypes": [
                "AWS::CodeConnections::Connection"
            ]
        },
        {
            "name": "AWS::CodeDeploy",
            "resourceTypes": [
                "AWS::CodeDeploy::Application",
                "AWS::CodeDeploy::DeploymentConfig",
                "AWS::CodeDeploy::DeploymentGroup"
            ]
        },
        {
            "name": "AWS::CodeGuruProfiler",
            "resourceTypes": [
                "AWS::CodeGuruProfiler::ProfilingGroup"
            ]
        },
        {
            "name": "AWS::CodeGuruReviewer",
            "resourceTypes": [
                "AWS::CodeGuruReviewer::RepositoryAssociation"
            ]
        },
        {
            "name": "AWS::CodePipeline",
            "resourceTypes": [
                "AWS::CodePipeline::CustomActionType",
                "AWS::CodePipeline::Pipeline",
                "AWS::CodePipeline::Webhook"
            ]
        },
        {
            "name": "AWS::CodeStar",
            "resourceTypes": [
                "AWS::CodeStar::GitHubRepository",
                "AWS::CodeStarConnections::Connection",
                "AWS::CodeStarConnections::RepositoryLink",
                "AWS::CodeStarConnections::SyncConfiguration",
                "AWS::CodeStarNotifications::NotificationRule"
            ]
        },
        {
            "name": "AWS::Cognito",
            "resourceTypes": [
                "AWS::Cognito::IdentityPool",
                "AWS::Cognito::IdentityPoolPrincipalTag",
                "AWS::Cognito::IdentityPoolRoleAttachment",
                "AWS::Cognito::LogDeliveryConfiguration",
                "AWS::Cognito::UserPool",
                "AWS::Cognito::UserPoolClient",
                "AWS::Cognito::UserPoolDomain",
                "AWS::Cognito::UserPoolGroup",
                "AWS::Cognito::UserPoolIdentityProvider",
                "AWS::Cognito::UserPoolResourceServer",
                "AWS::Cognito::UserPoolRiskConfigurationAttachment",
                "AWS::Cognito::UserPoolUICustomizationAttachment",
                "AWS::Cognito::UserPoolUser",
                "AWS::Cognito::UserPoolUserToGroupAttachment"
            ]
        },
        {
            "name": "AWS::Comprehend",
            "resourceTypes": [
                "AWS::Comprehend::DocumentClassifier",
                "AWS::Comprehend::Flywheel"
            ]
        },
        {
            "name": "AWS::Config",
            "resourceTypes": [
                "AWS::Config::AggregationAuthorization",
                "AWS::Config::ConfigRule",
                "AWS::Config::ConfigurationAggregator",
                "AWS::Config::ConfigurationRecorder",
                "AWS::Config::ConformancePack",
                "AWS::Config::DeliveryChannel",
                "AWS::Config::OrganizationConfigRule",
                "AWS::Config::OrganizationConformancePack",
                "AWS::Config::RemediationConfiguration",
                "AWS::Config::StoredQuery"
            ]
        },
        {
            "name": "AWS::Connect",
            "resourceTypes": [
                "AWS::Connect::ApprovedOrigin",
                "AWS::Connect::ContactFlow",
                "AWS::Connect::ContactFlowModule",
                "AWS::Connect::EvaluationForm",
                "AWS::Connect::HoursOfOperation",
                "AWS::Connect::Instance",
                "AWS::Connect::InstanceStorageConfig",
                "AWS::Connect::IntegrationAssociation",
                "AWS::Connect::PhoneNumber",
                "AWS::Connect::PredefinedAttribute",
                "AWS::Connect::Prompt",
                "AWS::Connect::Queue",
                "AWS::Connect::QuickConnect",
                "AWS::Connect::RoutingProfile",
                "AWS::Connect::Rule",
                "AWS::Connect::SecurityKey",
                "AWS::Connect::SecurityProfile",
                "AWS::Connect::TaskTemplate",
                "AWS::Connect::TrafficDistributionGroup",
                "AWS::Connect::User",
                "AWS::Connect::UserHierarchyGroup",
                "AWS::Connect::View",
                "AWS::Connect::ViewVersion",
                "AWS::ConnectCampaigns::Campaign"
            ]
        },
        {
            "name": "AWS::ControlTower",
            "resourceTypes": [
                "AWS::ControlTower::EnabledBaseline",
                "AWS::ControlTower::EnabledControl",
                "AWS::ControlTower::LandingZone"
            ]
        },
        {
            "name": "AWS::CustomerProfiles",
            "resourceTypes": [
                "AWS::CustomerProfiles::CalculatedAttributeDefinition",
                "AWS::CustomerProfiles::Domain",
                "AWS::CustomerProfiles::EventStream",
                "AWS::CustomerProfiles::Integration",
                "AWS::CustomerProfiles::ObjectType"
            ]
        },
        {
            "name": "AWS::CE",
            "resourceTypes": [
                "AWS::CE::AnomalyMonitor",
                "AWS::CE::AnomalySubscription",
                "AWS::CE::CostCategory"
            ]
        },
        {
            "name": "AWS::CUR",
            "resourceTypes": [
                "AWS::CUR::ReportDefinition"
            ]
        },
        {
            "name": "AWS::BCMDataExports",
            "resourceTypes": [
                "AWS::BCMDataExports::Export"
            ]
        },
        {
            "name": "AWS::DLM",
            "resourceTypes": [
                "AWS::DLM::LifecyclePolicy"
            ]
        },
        {
            "name": "AWS::DataPipeline",
            "resourceTypes": [
                "AWS::DataPipeline::Pipeline"
            ]
        },
        {
            "name": "AWS::DataSync",
            "resourceTypes": [
                "AWS::DataSync::Agent",
                "AWS::DataSync::LocationAzureBlob",
                "AWS::DataSync::LocationEFS",
                "AWS::DataSync::LocationFSxLustre",
                "AWS::DataSync::LocationFSxONTAP",
                "AWS::DataSync::LocationFSxOpenZFS",
                "AWS::DataSync::LocationFSxWindows",
                "AWS::DataSync::LocationHDFS",
                "AWS::DataSync::LocationNFS",
                "AWS::DataSync::LocationObjectStorage",
                "AWS::DataSync::LocationS3",
                "AWS::DataSync::LocationSMB",
                "AWS::DataSync::StorageSystem",
                "AWS::DataSync::Task"
            ]
        },
        {
            "name": "AWS::DataZone",
            "resourceTypes": [
                "AWS::DataZone::DataSource",
                "AWS::DataZone::Domain",
                "AWS::DataZone::Environment",
                "AWS::DataZone::EnvironmentBlueprintConfiguration",
                "AWS::DataZone::EnvironmentProfile",
                "AWS::DataZone::Project",
                "AWS::DataZone::SubscriptionTarget"
            ]
        },
        {
            "name": "AWS::Deadline",
            "resourceTypes": [
                "AWS::Deadline::Farm",
                "AWS::Deadline::Fleet",
                "AWS::Deadline::LicenseEndpoint",
                "AWS::Deadline::MeteredProduct",
                "AWS::Deadline::Queue",
                "AWS::Deadline::QueueEnvironment",
                "AWS::Deadline::QueueFleetAssociation",
                "AWS::Deadline::StorageProfile"
            ]
        },
        {
            "name": "AWS::DAX",
            "resourceTypes": [
                "AWS::DAX::Cluster",
                "AWS::DAX::ParameterGroup",
                "AWS::DAX::SubnetGroup"
            ]
        },
        {
            "name": "AWS::Detective",
            "resourceTypes": [
                "AWS::Detective::Graph",
                "AWS::Detective::MemberInvitation",
                "AWS::Detective::OrganizationAdmin"
            ]
        },
        {
            "name": "AWS::DeviceFarm",
            "resourceTypes": [
                "AWS::DeviceFarm::DevicePool",
                "AWS::DeviceFarm::InstanceProfile",
                "AWS::DeviceFarm::NetworkProfile",
                "AWS::DeviceFarm::Project",
                "AWS::DeviceFarm::TestGridProject",
                "AWS::DeviceFarm::VPCEConfiguration"
            ]
        },
        {
            "name": "AWS::DevOpsGuru",
            "resourceTypes": [
                "AWS::DevOpsGuru::LogAnomalyDetectionIntegration",
                "AWS::DevOpsGuru::NotificationChannel",
                "AWS::DevOpsGuru::ResourceCollection"
            ]
        },
        {
            "name": "AWS::DirectoryService",
            "resourceTypes": [
                "AWS::DirectoryService::MicrosoftAD",
                "AWS::DirectoryService::SimpleAD"
            ]
        },
        {
            "name": "AWS::DMS",
            "resourceTypes": [
                "AWS::DMS::Certificate",
                "AWS::DMS::DataProvider",
                "AWS::DMS::Endpoint",
                "AWS::DMS::EventSubscription",
                "AWS::DMS::InstanceProfile",
                "AWS::DMS::MigrationProject",
                "AWS::DMS::ReplicationConfig",
                "AWS::DMS::ReplicationInstance",
                "AWS::DMS::ReplicationSubnetGroup",
                "AWS::DMS::ReplicationTask"
            ]
        },
        {
            "name": "AWS::DocDB",
            "resourceTypes": [
                "AWS::DocDB::DBCluster",
                "AWS::DocDB::DBClusterParameterGroup",
                "AWS::DocDB::DBInstance",
                "AWS::DocDB::DBSubnetGroup",
                "AWS::DocDB::EventSubscription",
                "AWS::DocDBElastic::Cluster"
            ]
        },
        {
            "name": "AWS::DynamoDB",
            "resourceTypes": [
                "AWS::DynamoDB::GlobalTable",
                "AWS::DynamoDB::Table"
            ]
        },
        {
            "name": "AWS::EC2",
            "resourceTypes": [
                "AWS::EC2::CapacityReservation",
                "AWS::EC2::CapacityReservationFleet",
                "AWS::EC2::CarrierGateway",
                "AWS::EC2::ClientVpnAuthorizationRule",
                "AWS::EC2::ClientVpnEndpoint",
                "AWS::EC2::ClientVpnRoute",
                "AWS::EC2::ClientVpnTargetNetworkAssociation",
                "AWS::EC2::CustomerGateway",
                "AWS::EC2::DHCPOptions",
                "AWS::EC2::EC2Fleet",
                "AWS::EC2::EgressOnlyInternetGateway",
                "AWS::EC2::EIP",
                "AWS::EC2::EIPAssociation",
                "AWS::EC2::EnclaveCertificateIamRoleAssociation",
                "AWS::EC2::FlowLog",
                "AWS::EC2::GatewayRouteTableAssociation",
                "AWS::EC2::Host",
                "AWS::EC2::Instance",
                "AWS::EC2::InstanceConnectEndpoint",
                "AWS::EC2::InternetGateway",
                "AWS::EC2::IPAM",
                "AWS::EC2::IPAMAllocation",
                "AWS::EC2::IPAMPool",
                "AWS::EC2::IPAMPoolCidr",
                "AWS::EC2::IPAMResourceDiscovery",
                "AWS::EC2::IPAMResourceDiscoveryAssociation",
                "AWS::EC2::IPAMScope",
                "AWS::EC2::KeyPair",
                "AWS::EC2::LaunchTemplate",
                "AWS::EC2::LocalGatewayRoute",
                "AWS::EC2::LocalGatewayRouteTable",
                "AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation",
                "AWS::EC2::LocalGatewayRouteTableVPCAssociation",
                "AWS::EC2::NatGateway",
                "AWS::EC2::NetworkAcl",
                "AWS::EC2::NetworkAclEntry",
                "AWS::EC2::NetworkInsightsAccessScope",
                "AWS::EC2::NetworkInsightsAccessScopeAnalysis",
                "AWS::EC2::NetworkInsightsAnalysis",
                "AWS::EC2::NetworkInsightsPath",
                "AWS::EC2::NetworkInterface",
                "AWS::EC2::NetworkInterfaceAttachment",
                "AWS::EC2::NetworkInterfacePermission",
                "AWS::EC2::NetworkPerformanceMetricSubscription",
                "AWS::EC2::PlacementGroup",
                "AWS::EC2::PrefixList",
                "AWS::EC2::Route",
                "AWS::EC2::RouteTable",
                "AWS::EC2::SecurityGroup",
                "AWS::EC2::SecurityGroupEgress",
                "AWS::EC2::SecurityGroupIngress",
                "AWS::EC2::SnapshotBlockPublicAccess",
                "AWS::EC2::SpotFleet",
                "AWS::EC2::Subnet",
                "AWS::EC2::SubnetCidrBlock",
                "AWS::EC2::SubnetNetworkAclAssociation",
                "AWS::EC2::SubnetRouteTableAssociation",
                "AWS::EC2::TrafficMirrorFilter",
                "AWS::EC2::TrafficMirrorFilterRule",
                "AWS::EC2::TrafficMirrorSession",
                "AWS::EC2::TrafficMirrorTarget",
                "AWS::EC2::TransitGateway",
                "AWS::EC2::TransitGatewayAttachment",
                "AWS::EC2::TransitGatewayConnect",
                "AWS::EC2::TransitGatewayMulticastDomain",
                "AWS::EC2::TransitGatewayMulticastDomainAssociation",
                "AWS::EC2::TransitGatewayMulticastGroupMember",
                "AWS::EC2::TransitGatewayMulticastGroupSource",
                "AWS::EC2::TransitGatewayPeeringAttachment",
                "AWS::EC2::TransitGatewayRoute",
                "AWS::EC2::TransitGatewayRouteTable",
                "AWS::EC2::TransitGatewayRouteTableAssociation",
                "AWS::EC2::TransitGatewayRouteTablePropagation",
                "AWS::EC2::TransitGatewayVpcAttachment",
                "AWS::EC2::VerifiedAccessEndpoint",
                "AWS::EC2::VerifiedAccessGroup",
                "AWS::EC2::VerifiedAccessInstance",
                "AWS::EC2::VerifiedAccessTrustProvider",
                "AWS::EC2::Volume",
                "AWS::EC2::VolumeAttachment",
                "AWS::EC2::VPC",
                "AWS::EC2::VPCCidrBlock",
                "AWS::EC2::VPCDHCPOptionsAssociation",
                "AWS::EC2::VPCEndpoint",
                "AWS::EC2::VPCEndpointConnectionNotification",
                "AWS::EC2::VPCEndpointService",
                "AWS::EC2::VPCEndpointServicePermissions",
                "AWS::EC2::VPCGatewayAttachment",
                "AWS::EC2::VPCPeeringConnection",
                "AWS::EC2::VPNConnection",
                "AWS::EC2::VPNConnectionRoute",
                "AWS::EC2::VPNGateway",
                "AWS::EC2::VPNGatewayRoutePropagation"
            ]
        },
        {
            "name": "AWS::AutoScaling",
            "resourceTypes": [
                "AWS::AutoScaling::AutoScalingGroup",
                "AWS::AutoScaling::LaunchConfiguration",
                "AWS::AutoScaling::LifecycleHook",
                "AWS::AutoScaling::ScalingPolicy",
                "AWS::AutoScaling::ScheduledAction",
                "AWS::AutoScaling::WarmPool"
            ]
        },
        {
            "name": "AWS::ECR",
            "resourceTypes": [
                "AWS::ECR::PublicRepository",
                "AWS::ECR::PullThroughCacheRule",
                "AWS::ECR::RegistryPolicy",
                "AWS::ECR::ReplicationConfiguration",
                "AWS::ECR::Repository",
                "AWS::ECR::RepositoryCreationTemplate"
            ]
        },
        {
            "name": "AWS::ECS",
            "resourceTypes": [
                "AWS::ECS::CapacityProvider",
                "AWS::ECS::Cluster",
                "AWS::ECS::ClusterCapacityProviderAssociations",
                "AWS::ECS::PrimaryTaskSet",
                "AWS::ECS::Service",
                "AWS::ECS::TaskDefinition",
                "AWS::ECS::TaskSet"
            ]
        },
        {
            "name": "AWS::EFS",
            "resourceTypes": [
                "AWS::EFS::AccessPoint",
                "AWS::EFS::FileSystem",
                "AWS::EFS::MountTarget"
            ]
        },
        {
            "name": "AWS::EKS",
            "resourceTypes": [
                "AWS::EKS::AccessEntry",
                "AWS::EKS::Addon",
                "AWS::EKS::Cluster",
                "AWS::EKS::FargateProfile",
                "AWS::EKS::IdentityProviderConfig",
                "AWS::EKS::Nodegroup",
                "AWS::EKS::PodIdentityAssociation"
            ]
        },
        {
            "name": "AWS::ElasticBeanstalk",
            "resourceTypes": [
                "AWS::ElasticBeanstalk::Application",
                "AWS::ElasticBeanstalk::ApplicationVersion",
                "AWS::ElasticBeanstalk::ConfigurationTemplate",
                "AWS::ElasticBeanstalk::Environment"
            ]
        },
        {
            "name": "AWS::ElasticLoadBalancing",
            "resourceTypes": [
                "AWS::ElasticLoadBalancing::LoadBalancer",
                "AWS::ElasticLoadBalancingV2::Listener",
                "AWS::ElasticLoadBalancingV2::ListenerCertificate",
                "AWS::ElasticLoadBalancingV2::ListenerRule",
                "AWS::ElasticLoadBalancingV2::LoadBalancer",
                "AWS::ElasticLoadBalancingV2::TargetGroup",
                "AWS::ElasticLoadBalancingV2::TrustStore",
                "AWS::ElasticLoadBalancingV2::TrustStoreRevocation"
            ]
        },
        {
            "name": "AWS::EMR",
            "resourceTypes": [
                "AWS::EMR::Cluster",
                "AWS::EMR::InstanceFleetConfig",
                "AWS::EMR::InstanceGroupConfig",
                "AWS::EMR::SecurityConfiguration",
                "AWS::EMR::Step",
                "AWS::EMR::Studio",
                "AWS::EMR::StudioSessionMapping",
                "AWS::EMR::WALWorkspace",
                "AWS::EMRServerless::Application",
                "AWS::EMRContainers::VirtualCluster"
            ]
        },
        {
            "name": "AWS::ElastiCache",
            "resourceTypes": [
                "AWS::ElastiCache::CacheCluster",
                "AWS::ElastiCache::GlobalReplicationGroup",
                "AWS::ElastiCache::ParameterGroup",
                "AWS::ElastiCache::ReplicationGroup",
                "AWS::ElastiCache::SecurityGroup",
                "AWS::ElastiCache::SecurityGroupIngress",
                "AWS::ElastiCache::ServerlessCache",
                "AWS::ElastiCache::SubnetGroup",
                "AWS::ElastiCache::User",
                "AWS::ElastiCache::UserGroup"
            ]
        },
        {
            "name": "AWS::EntityResolution",
            "resourceTypes": [
                "AWS::EntityResolution::IdMappingWorkflow",
                "AWS::EntityResolution::IdNamespace",
                "AWS::EntityResolution::MatchingWorkflow",
                "AWS::EntityResolution::PolicyStatement",
                "AWS::EntityResolution::SchemaMapping"
            ]
        },
        {
            "name": "AWS::Events",
            "resourceTypes": [
                "AWS::Events::ApiDestination",
                "AWS::Events::Archive",
                "AWS::Events::Connection",
                "AWS::Events::Endpoint",
                "AWS::Events::EventBus",
                "AWS::Events::EventBusPolicy",
                "AWS::Events::Rule",
                "AWS::EventSchemas::Discoverer",
                "AWS::EventSchemas::Registry",
                "AWS::EventSchemas::RegistryPolicy",
                "AWS::EventSchemas::Schema"
            ]
        },
        {
            "name": "AWS::Pipes",
            "resourceTypes": [
                "AWS::Pipes::Pipe"
            ]
        },
        {
            "name": "AWS::Scheduler",
            "resourceTypes": [
                "AWS::Scheduler::Schedule",
                "AWS::Scheduler::ScheduleGroup"
            ]
        },
        {
            "name": "AWS::FinSpace",
            "resourceTypes": [
                "AWS::FinSpace::Environment"
            ]
        },
        {
            "name": "AWS::FIS",
            "resourceTypes": [
                "AWS::FIS::ExperimentTemplate",
                "AWS::FIS::TargetAccountConfiguration"
            ]
        },
        {
            "name": "AWS::FMS",
            "resourceTypes": [
                "AWS::FMS::NotificationChannel",
                "AWS::FMS::Policy",
                "AWS::FMS::ResourceSet"
            ]
        },
        {
            "name": "AWS::Forecast",
            "resourceTypes": [
                "AWS::Forecast::Dataset",
                "AWS::Forecast::DatasetGroup"
            ]
        },
        {
            "name": "AWS::FraudDetector",
            "resourceTypes": [
                "AWS::FraudDetector::Detector",
                "AWS::FraudDetector::EntityType",
                "AWS::FraudDetector::EventType",
                "AWS::FraudDetector::Label",
                "AWS::FraudDetector::List",
                "AWS::FraudDetector::Outcome",
                "AWS::FraudDetector::Variable"
            ]
        },
        {
            "name": "AWS::FSx",
            "resourceTypes": [
                "AWS::FSx::DataRepositoryAssociation",
                "AWS::FSx::FileSystem",
                "AWS::FSx::Snapshot",
                "AWS::FSx::StorageVirtualMachine",
                "AWS::FSx::Volume"
            ]
        },
        {
            "name": "AWS::GameLift",
            "resourceTypes": [
                "AWS::GameLift::Alias",
                "AWS::GameLift::Build",
                "AWS::GameLift::ContainerGroupDefinition",
                "AWS::GameLift::Fleet",
                "AWS::GameLift::GameServerGroup",
                "AWS::GameLift::GameSessionQueue",
                "AWS::GameLift::Location",
                "AWS::GameLift::MatchmakingConfiguration",
                "AWS::GameLift::MatchmakingRuleSet",
                "AWS::GameLift::Script"
            ]
        },
        {
            "name": "AWS::GlobalAccelerator",
            "resourceTypes": [
                "AWS::GlobalAccelerator::Accelerator",
                "AWS::GlobalAccelerator::CrossAccountAttachment",
                "AWS::GlobalAccelerator::EndpointGroup",
                "AWS::GlobalAccelerator::Listener"
            ]
        },
        {
            "name": "AWS::Glue",
            "resourceTypes": [
                "AWS::Glue::Classifier",
                "AWS::Glue::Connection",
                "AWS::Glue::Crawler",
                "AWS::Glue::CustomEntityType",
                "AWS::Glue::Database",
                "AWS::Glue::DataCatalogEncryptionSettings",
                "AWS::Glue::DataQualityRuleset",
                "AWS::Glue::DevEndpoint",
                "AWS::Glue::Job",
                "AWS::Glue::MLTransform",
                "AWS::Glue::Partition",
                "AWS::Glue::Registry",
                "AWS::Glue::Schema",
                "AWS::Glue::SchemaVersion",
                "AWS::Glue::SchemaVersionMetadata",
                "AWS::Glue::SecurityConfiguration",
                "AWS::Glue::Table",
                "AWS::Glue::TableOptimizer",
                "AWS::Glue::Trigger",
                "AWS::Glue::Workflow"
            ]
        },
        {
            "name": "AWS::DataBrew",
            "resourceTypes": [
                "AWS::DataBrew::Dataset",
                "AWS::DataBrew::Job",
                "AWS::DataBrew::Project",
                "AWS::DataBrew::Recipe",
                "AWS::DataBrew::Ruleset",
                "AWS::DataBrew::Schedule"
            ]
        },
        {
            "name": "AWS::Grafana",
            "resourceTypes": [
                "AWS::Grafana::Workspace"
            ]
        },
        {
            "name": "AWS::GroundStation",
            "resourceTypes": [
                "AWS::GroundStation::Config",
                "AWS::GroundStation::DataflowEndpointGroup",
                "AWS::GroundStation::MissionProfile"
            ]
        },
        {
            "name": "AWS::GuardDuty",
            "resourceTypes": [
                "AWS::GuardDuty::Detector",
                "AWS::GuardDuty::Filter",
                "AWS::GuardDuty::IPSet",
                "AWS::GuardDuty::Master",
                "AWS::GuardDuty::Member",
                "AWS::GuardDuty::ThreatIntelSet"
            ]
        },
        {
            "name": "AWS::HealthImaging",
            "resourceTypes": [
                "AWS::HealthImaging::Datastore"
            ]
        },
        {
            "name": "AWS::HealthLake",
            "resourceTypes": [
                "AWS::HealthLake::FHIRDatastore"
            ]
        },
        {
            "name": "AWS::IAM",
            "resourceTypes": [
                "AWS::IAM::AccessKey",
                "AWS::IAM::Group",
                "AWS::IAM::GroupPolicy",
                "AWS::IAM::InstanceProfile",
                "AWS::IAM::ManagedPolicy",
                "AWS::IAM::OIDCProvider",
                "AWS::IAM::Policy",
                "AWS::IAM::Role",
                "AWS::IAM::RolePolicy",
                "AWS::IAM::SAMLProvider",
                "AWS::IAM::ServerCertificate",
                "AWS::IAM::ServiceLinkedRole",
                "AWS::IAM::User",
                "AWS::IAM::UserPolicy",
                "AWS::IAM::UserToGroupAddition",
                "AWS::IAM::VirtualMFADevice"
            ]
        },
        {
            "name": "AWS::SSO",
            "resourceTypes": [
                "AWS::SSO::Application",
                "AWS::SSO::ApplicationAssignment",
                "AWS::SSO::Assignment",
                "AWS::SSO::Instance",
                "AWS::SSO::InstanceAccessControlAttributeConfiguration",
                "AWS::SSO::PermissionSet"
            ]
        },
        {
            "name": "AWS::IdentityStore",
            "resourceTypes": [
                "AWS::IdentityStore::Group",
                "AWS::IdentityStore::GroupMembership"
            ]
        },
        {
            "name": "AWS::AccessAnalyzer",
            "resourceTypes": [
                "AWS::AccessAnalyzer::Analyzer"
            ]
        },
        {
            "name": "AWS::ImageBuilder",
            "resourceTypes": [
                "AWS::ImageBuilder::Component",
                "AWS::ImageBuilder::ContainerRecipe",
                "AWS::ImageBuilder::DistributionConfiguration",
                "AWS::ImageBuilder::Image",
                "AWS::ImageBuilder::ImagePipeline",
                "AWS::ImageBuilder::ImageRecipe",
                "AWS::ImageBuilder::InfrastructureConfiguration",
                "AWS::ImageBuilder::LifecyclePolicy",
                "AWS::ImageBuilder::Workflow"
            ]
        },
        {
            "name": "AWS::Inspector",
            "resourceTypes": [
                "AWS::Inspector::AssessmentTarget",
                "AWS::Inspector::AssessmentTemplate",
                "AWS::Inspector::ResourceGroup",
                "AWS::InspectorV2::CisScanConfiguration",
                "AWS::InspectorV2::Filter"
            ]
        },
        {
            "name": "AWS::IoT",
            "resourceTypes": [
                "AWS::IoT::AccountAuditConfiguration",
                "AWS::IoT::Authorizer",
                "AWS::IoT::BillingGroup",
                "AWS::IoT::CACertificate",
                "AWS::IoT::Certificate",
                "AWS::IoT::CertificateProvider",
                "AWS::IoT::CustomMetric",
                "AWS::IoT::Dimension",
                "AWS::IoT::DomainConfiguration",
                "AWS::IoT::FleetMetric",
                "AWS::IoT::JobTemplate",
                "AWS::IoT::Logging",
                "AWS::IoT::MitigationAction",
                "AWS::IoT::Policy",
                "AWS::IoT::PolicyPrincipalAttachment",
                "AWS::IoT::ProvisioningTemplate",
                "AWS::IoT::ResourceSpecificLogging",
                "AWS::IoT::RoleAlias",
                "AWS::IoT::ScheduledAudit",
                "AWS::IoT::SecurityProfile",
                "AWS::IoT::SoftwarePackage",
                "AWS::IoT::SoftwarePackageVersion",
                "AWS::IoT::Thing",
                "AWS::IoT::ThingGroup",
                "AWS::IoT::ThingPrincipalAttachment",
                "AWS::IoT::ThingType",
                "AWS::IoT::TopicRule",
                "AWS::IoT::TopicRuleDestination",
                "AWS::IoT1Click::Device",
                "AWS::IoT1Click::Placement",
                "AWS::IoT1Click::Project",
                "AWS::IoTAnalytics::Channel",
                "AWS::IoTAnalytics::Dataset",
                "AWS::IoTAnalytics::Datastore",
                "AWS::IoTAnalytics::Pipeline",
                "AWS::IoTCoreDeviceAdvisor::SuiteDefinition",
                "AWS::IoTEvents::AlarmModel",
                "AWS::IoTEvents::DetectorModel",
                "AWS::IoTEvents::Input",
                "AWS::IoTFleetHub::Application",
                "AWS::IoTFleetWise::Campaign",
                "AWS::IoTFleetWise::DecoderManifest",
                "AWS::IoTFleetWise::Fleet",
                "AWS::IoTFleetWise::ModelManifest",
                "AWS::IoTFleetWise::SignalCatalog",
                "AWS::IoTFleetWise::Vehicle",
                "AWS::IoTSiteWise::AccessPolicy",
                "AWS::IoTSiteWise::Asset",
                "AWS::IoTSiteWise::AssetModel",
                "AWS::IoTSiteWise::Dashboard",
                "AWS::IoTSiteWise::Gateway",
                "AWS::IoTSiteWise::Portal",
                "AWS::IoTSiteWise::Project",
                "AWS::IoTTwinMaker::ComponentType",
                "AWS::IoTTwinMaker::Entity",
                "AWS::IoTTwinMaker::Scene",
                "AWS::IoTTwinMaker::SyncJob",
                "AWS::IoTTwinMaker::Workspace",
                "AWS::IoTWireless::Destination",
                "AWS::IoTWireless::DeviceProfile",
                "AWS::IoTWireless::FuotaTask",
                "AWS::IoTWireless::MulticastGroup",
                "AWS::IoTWireless::NetworkAnalyzerConfiguration",
                "AWS::IoTWireless::PartnerAccount",
                "AWS::IoTWireless::ServiceProfile",
                "AWS::IoTWireless::TaskDefinition",
                "AWS::IoTWireless::WirelessDevice",
                "AWS::IoTWireless::WirelessDeviceImportTask",
                "AWS::IoTWireless::WirelessGateway"
            ]
        },
        {
            "name": "AWS::Greengrass",
            "resourceTypes": [
                "AWS::Greengrass::ConnectorDefinition",
                "AWS::Greengrass::ConnectorDefinitionVersion",
                "AWS::Greengrass::CoreDefinition",
                "AWS::Greengrass::CoreDefinitionVersion",
                "AWS::Greengrass::DeviceDefinition",
                "AWS::Greengrass::DeviceDefinitionVersion",
                "AWS::Greengrass::FunctionDefinition",
                "AWS::Greengrass::FunctionDefinitionVersion",
                "AWS::Greengrass::Group",
                "AWS::Greengrass::GroupVersion",
                "AWS::Greengrass::LoggerDefinition",
                "AWS::Greengrass::LoggerDefinitionVersion",
                "AWS::Greengrass::ResourceDefinition",
                "AWS::Greengrass::ResourceDefinitionVersion",
                "AWS::Greengrass::SubscriptionDefinition",
                "AWS::Greengrass::SubscriptionDefinitionVersion",
                "AWS::GreengrassV2::ComponentVersion",
                "AWS::GreengrassV2::Deployment"
            ]
        },
        {
            "name": "AWS::IVS",
            "resourceTypes": [
                "AWS::IVS::Channel",
                "AWS::IVS::EncoderConfiguration",
                "AWS::IVS::PlaybackKeyPair",
                "AWS::IVS::PlaybackRestrictionPolicy",
                "AWS::IVS::RecordingConfiguration",
                "AWS::IVS::Stage",
                "AWS::IVS::StorageConfiguration",
                "AWS::IVS::StreamKey",
                "AWS::IVSChat::LoggingConfiguration",
                "AWS::IVSChat::Room"
            ]
        },
        {
            "name": "AWS::Kendra",
            "resourceTypes": [
                "AWS::Kendra::DataSource",
                "AWS::Kendra::Faq",
                "AWS::Kendra::Index",
                "AWS::KendraRanking::ExecutionPlan"
            ]
        },
        {
            "name": "AWS::Cassandra",
            "resourceTypes": [
                "AWS::Cassandra::Keyspace",
                "AWS::Cassandra::Table"
            ]
        },
        {
            "name": "AWS::Kinesis",
            "resourceTypes": [
                "AWS::Kinesis::Stream",
                "AWS::Kinesis::StreamConsumer",
                "AWS::KinesisAnalytics::Application",
                "AWS::KinesisAnalytics::ApplicationOutput",
                "AWS::KinesisAnalytics::ApplicationReferenceDataSource",
                "AWS::KinesisAnalyticsV2::Application",
                "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption",
                "AWS::KinesisAnalyticsV2::ApplicationOutput",
                "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource",
                "AWS::KinesisFirehose::DeliveryStream",
                "AWS::KinesisVideo::SignalingChannel",
                "AWS::KinesisVideo::Stream"
            ]
        },
        {
            "name": "AWS::KMS",
            "resourceTypes": [
                "AWS::KMS::Alias",
                "AWS::KMS::Key",
                "AWS::KMS::ReplicaKey"
            ]
        },
        {
            "name": "AWS::LakeFormation",
            "resourceTypes": [
                "AWS::LakeFormation::DataCellsFilter",
                "AWS::LakeFormation::DataLakeSettings",
                "AWS::LakeFormation::Permissions",
                "AWS::LakeFormation::PrincipalPermissions",
                "AWS::LakeFormation::Resource",
                "AWS::LakeFormation::Tag",
                "AWS::LakeFormation::TagAssociation"
            ]
        },
        {
            "name": "AWS::Lambda",
            "resourceTypes": [
                "AWS::Lambda::Alias",
                "AWS::Lambda::CodeSigningConfig",
                "AWS::Lambda::EventInvokeConfig",
                "AWS::Lambda::EventSourceMapping",
                "AWS::Lambda::Function",
                "AWS::Lambda::LayerVersion",
                "AWS::Lambda::LayerVersionPermission",
                "AWS::Lambda::Permission",
                "AWS::Lambda::Url",
                "AWS::Lambda::Version"
            ]
        },
        {
            "name": "AWS::Lex",
            "resourceTypes": [
                "AWS::Lex::Bot",
                "AWS::Lex::BotAlias",
                "AWS::Lex::BotVersion",
                "AWS::Lex::ResourcePolicy"
            ]
        },
        {
            "name": "AWS::LicenseManager",
            "resourceTypes": [
                "AWS::LicenseManager::Grant",
                "AWS::LicenseManager::License"
            ]
        },
        {
            "name": "AWS::Lightsail",
            "resourceTypes": [
                "AWS::Lightsail::Alarm",
                "AWS::Lightsail::Bucket",
                "AWS::Lightsail::Certificate",
                "AWS::Lightsail::Container",
                "AWS::Lightsail::Database",
                "AWS::Lightsail::Disk",
                "AWS::Lightsail::Distribution",
                "AWS::Lightsail::Instance",
                "AWS::Lightsail::LoadBalancer",
                "AWS::Lightsail::LoadBalancerTlsCertificate",
                "AWS::Lightsail::StaticIp"
            ]
        },
        {
            "name": "AWS::Location",
            "resourceTypes": [
                "AWS::Location::APIKey",
                "AWS::Location::GeofenceCollection",
                "AWS::Location::Map",
                "AWS::Location::PlaceIndex",
                "AWS::Location::RouteCalculator",
                "AWS::Location::Tracker",
                "AWS::Location::TrackerConsumer"
            ]
        },
        {
            "name": "AWS::LookoutEquipment",
            "resourceTypes": [
                "AWS::LookoutEquipment::InferenceScheduler"
            ]
        },
        {
            "name": "AWS::LookoutMetrics",
            "resourceTypes": [
                "AWS::LookoutMetrics::Alert",
                "AWS::LookoutMetrics::AnomalyDetector"
            ]
        },
        {
            "name": "AWS::LookoutVision",
            "resourceTypes": [
                "AWS::LookoutVision::Project"
            ]
        },
        {
            "name": "AWS::M2",
            "resourceTypes": [
                "AWS::M2::Application",
                "AWS::M2::Environment"
            ]
        },
        {
            "name": "AWS::Macie",
            "resourceTypes": [
                "AWS::Macie::AllowList",
                "AWS::Macie::CustomDataIdentifier",
                "AWS::Macie::FindingsFilter",
                "AWS::Macie::Session"
            ]
        },
        {
            "name": "AWS::ManagedBlockchain",
            "resourceTypes": [
                "AWS::ManagedBlockchain::Accessor",
                "AWS::ManagedBlockchain::Member",
                "AWS::ManagedBlockchain::Node"
            ]
        },
        {
            "name": "AWS::MediaConnect",
            "resourceTypes": [
                "AWS::MediaConnect::Bridge",
                "AWS::MediaConnect::BridgeOutput",
                "AWS::MediaConnect::BridgeSource",
                "AWS::MediaConnect::Flow",
                "AWS::MediaConnect::FlowEntitlement",
                "AWS::MediaConnect::FlowOutput",
                "AWS::MediaConnect::FlowSource",
                "AWS::MediaConnect::FlowVpcInterface",
                "AWS::MediaConnect::Gateway"
            ]
        },
        {
            "name": "AWS::MediaConvert",
            "resourceTypes": [
                "AWS::MediaConvert::JobTemplate",
                "AWS::MediaConvert::Preset",
                "AWS::MediaConvert::Queue"
            ]
        },
        {
            "name": "AWS::MediaLive",
            "resourceTypes": [
                "AWS::MediaLive::Channel",
                "AWS::MediaLive::Input",
                "AWS::MediaLive::InputSecurityGroup",
                "AWS::MediaLive::Multiplex",
                "AWS::MediaLive::Multiplexprogram"
            ]
        },
        {
            "name": "AWS::MediaPackage",
            "resourceTypes": [
                "AWS::MediaPackage::Asset",
                "AWS::MediaPackage::Channel",
                "AWS::MediaPackage::OriginEndpoint",
                "AWS::MediaPackage::PackagingConfiguration",
                "AWS::MediaPackage::PackagingGroup",
                "AWS::MediaPackageV2::Channel",
                "AWS::MediaPackageV2::ChannelGroup",
                "AWS::MediaPackageV2::ChannelPolicy",
                "AWS::MediaPackageV2::OriginEndpoint",
                "AWS::MediaPackageV2::OriginEndpointPolicy"
            ]
        },
        {
            "name": "AWS::MediaTailor",
            "resourceTypes": [
                "AWS::MediaTailor::Channel",
                "AWS::MediaTailor::ChannelPolicy",
                "AWS::MediaTailor::LiveSource",
                "AWS::MediaTailor::PlaybackConfiguration",
                "AWS::MediaTailor::SourceLocation",
                "AWS::MediaTailor::VodSource"
            ]
        },
        {
            "name": "AWS::MediaStore",
            "resourceTypes": [
                "AWS::MediaStore::Container"
            ]
        },
        {
            "name": "AWS::AmazonMQ",
            "resourceTypes": [
                "AWS::AmazonMQ::Broker",
                "AWS::AmazonMQ::Configuration",
                "AWS::AmazonMQ::ConfigurationAssociation"
            ]
        },
        {
            "name": "AWS::MemoryDB",
            "resourceTypes": [
                "AWS::MemoryDB::ACL",
                "AWS::MemoryDB::Cluster",
                "AWS::MemoryDB::ParameterGroup",
                "AWS::MemoryDB::SubnetGroup",
                "AWS::MemoryDB::User"
            ]
        },
        {
            "name": "AWS::MSK",
            "resourceTypes": [
                "AWS::MSK::BatchScramSecret",
                "AWS::MSK::Cluster",
                "AWS::MSK::ClusterPolicy",
                "AWS::MSK::Configuration",
                "AWS::MSK::Replicator",
                "AWS::MSK::ServerlessCluster",
                "AWS::MSK::VpcConnection"
            ]
        },
        {
            "name": "AWS::KafkaConnect",
            "resourceTypes": [
                "AWS::KafkaConnect::Connector",
                "AWS::KafkaConnect::CustomPlugin",
                "AWS::KafkaConnect::WorkerConfiguration"
            ]
        },
        {
            "name": "AWS::MWAA",
            "resourceTypes": [
                "AWS::MWAA::Environment"
            ]
        },
        {
            "name": "AWS::Neptune",
            "resourceTypes": [
                "AWS::Neptune::DBCluster",
                "AWS::Neptune::DBClusterParameterGroup",
                "AWS::Neptune::DBInstance",
                "AWS::Neptune::DBParameterGroup",
                "AWS::Neptune::DBSubnetGroup",
                "AWS::Neptune::EventSubscription",
                "AWS::NeptuneGraph::Graph",
                "AWS::NeptuneGraph::PrivateGraphEndpoint"
            ]
        },
        {
            "name": "AWS::NetworkFirewall",
            "resourceTypes": [
                "AWS::NetworkFirewall::Firewall",
                "AWS::NetworkFirewall::FirewallPolicy",
                "AWS::NetworkFirewall::LoggingConfiguration",
                "AWS::NetworkFirewall::RuleGroup",
                "AWS::NetworkFirewall::TLSInspectionConfiguration"
            ]
        },
        {
            "name": "AWS::NetworkManager",
            "resourceTypes": [
                "AWS::NetworkManager::ConnectAttachment",
                "AWS::NetworkManager::ConnectPeer",
                "AWS::NetworkManager::CoreNetwork",
                "AWS::NetworkManager::CustomerGatewayAssociation",
                "AWS::NetworkManager::Device",
                "AWS::NetworkManager::GlobalNetwork",
                "AWS::NetworkManager::Link",
                "AWS::NetworkManager::LinkAssociation",
                "AWS::NetworkManager::Site",
                "AWS::NetworkManager::SiteToSiteVpnAttachment",
                "AWS::NetworkManager::TransitGatewayPeering",
                "AWS::NetworkManager::TransitGatewayRegistration",
                "AWS::NetworkManager::TransitGatewayRouteTableAttachment",
                "AWS::NetworkManager::VpcAttachment"
            ]
        },
        {
            "name": "AWS::NimbleStudio",
            "resourceTypes": [
                "AWS::NimbleStudio::LaunchProfile",
                "AWS::NimbleStudio::StreamingImage",
                "AWS::NimbleStudio::Studio",
                "AWS::NimbleStudio::StudioComponent"
            ]
        },
        {
            "name": "AWS::Oam",
            "resourceTypes": [
                "AWS::Oam::Link",
                "AWS::Oam::Sink"
            ]
        },
        {
            "name": "AWS::Omics",
            "resourceTypes": [
                "AWS::Omics::AnnotationStore",
                "AWS::Omics::ReferenceStore",
                "AWS::Omics::RunGroup",
                "AWS::Omics::SequenceStore",
                "AWS::Omics::VariantStore",
                "AWS::Omics::Workflow"
            ]
        },
        {
            "name": "AWS::OSIS",
            "resourceTypes": [
                "AWS::OSIS::Pipeline"
            ]
        },
        {
            "name": "AWS::OpenSearchService",
            "resourceTypes": [
                "AWS::OpenSearchService::Domain"
            ]
        },
        {
            "name": "AWS::Elasticsearch",
            "resourceTypes": [
                "AWS::Elasticsearch::Domain"
            ]
        },
        {
            "name": "AWS::OpenSearchServerless",
            "resourceTypes": [
                "AWS::OpenSearchServerless::AccessPolicy",
                "AWS::OpenSearchServerless::Collection",
                "AWS::OpenSearchServerless::LifecyclePolicy",
                "AWS::OpenSearchServerless::SecurityConfig",
                "AWS::OpenSearchServerless::SecurityPolicy",
                "AWS::OpenSearchServerless::VpcEndpoint"
            ]
        },
        {
            "name": "AWS::OpsWorks",
            "resourceTypes": [
                "AWS::OpsWorks::App",
                "AWS::OpsWorks::ElasticLoadBalancerAttachment",
                "AWS::OpsWorks::Instance",
                "AWS::OpsWorks::Layer",
                "AWS::OpsWorks::Stack",
                "AWS::OpsWorks::UserProfile",
                "AWS::OpsWorks::Volume",
                "AWS::OpsWorksCM::Server"
            ]
        },
        {
            "name": "AWS::Organizations",
            "resourceTypes": [
                "AWS::Organizations::Account",
                "AWS::Organizations::Organization",
                "AWS::Organizations::OrganizationalUnit",
                "AWS::Organizations::Policy",
                "AWS::Organizations::ResourcePolicy"
            ]
        },
        {
            "name": "AWS::Panorama",
            "resourceTypes": [
                "AWS::Panorama::ApplicationInstance",
                "AWS::Panorama::Package",
                "AWS::Panorama::PackageVersion"
            ]
        },
        {
            "name": "AWS::PaymentCryptography",
            "resourceTypes": [
                "AWS::PaymentCryptography::Alias",
                "AWS::PaymentCryptography::Key"
            ]
        },
        {
            "name": "AWS::Personalize",
            "resourceTypes": [
                "AWS::Personalize::Dataset",
                "AWS::Personalize::DatasetGroup",
                "AWS::Personalize::Schema",
                "AWS::Personalize::Solution"
            ]
        },
        {
            "name": "AWS::Pinpoint",
            "resourceTypes": [
                "AWS::Pinpoint::ADMChannel",
                "AWS::Pinpoint::APNSChannel",
                "AWS::Pinpoint::APNSSandboxChannel",
                "AWS::Pinpoint::APNSVoipChannel",
                "AWS::Pinpoint::APNSVoipSandboxChannel",
                "AWS::Pinpoint::App",
                "AWS::Pinpoint::ApplicationSettings",
                "AWS::Pinpoint::BaiduChannel",
                "AWS::Pinpoint::Campaign",
                "AWS::Pinpoint::EmailChannel",
                "AWS::Pinpoint::EmailTemplate",
                "AWS::Pinpoint::EventStream",
                "AWS::Pinpoint::GCMChannel",
                "AWS::Pinpoint::InAppTemplate",
                "AWS::Pinpoint::PushTemplate",
                "AWS::Pinpoint::Segment",
                "AWS::Pinpoint::SMSChannel",
                "AWS::Pinpoint::SmsTemplate",
                "AWS::Pinpoint::VoiceChannel",
                "AWS::PinpointEmail::ConfigurationSet",
                "AWS::PinpointEmail::ConfigurationSetEventDestination",
                "AWS::PinpointEmail::DedicatedIpPool",
                "AWS::PinpointEmail::Identity"
            ]
        },
        {
            "name": "AWS::ACMPCA",
            "resourceTypes": [
                "AWS::ACMPCA::Certificate",
                "AWS::ACMPCA::CertificateAuthority",
                "AWS::ACMPCA::CertificateAuthorityActivation",
                "AWS::ACMPCA::Permission"
            ]
        },
        {
            "name": "AWS::PCAConnectorAD",
            "resourceTypes": [
                "AWS::PCAConnectorAD::Connector",
                "AWS::PCAConnectorAD::DirectoryRegistration",
                "AWS::PCAConnectorAD::ServicePrincipalName",
                "AWS::PCAConnectorAD::Template",
                "AWS::PCAConnectorAD::TemplateGroupAccessControlEntry"
            ]
        },
        {
            "name": "AWS::Proton",
            "resourceTypes": [
                "AWS::Proton::EnvironmentAccountConnection",
                "AWS::Proton::EnvironmentTemplate",
                "AWS::Proton::ServiceTemplate"
            ]
        },
        {
            "name": "AWS::APS",
            "resourceTypes": [
                "AWS::APS::RuleGroupsNamespace",
                "AWS::APS::Scraper",
                "AWS::APS::Workspace"
            ]
        },
        {
            "name": "AWS::QBusiness",
            "resourceTypes": [
                "AWS::QBusiness::Application",
                "AWS::QBusiness::DataSource",
                "AWS::QBusiness::Index",
                "AWS::QBusiness::Plugin",
                "AWS::QBusiness::Retriever",
                "AWS::QBusiness::WebExperience"
            ]
        },
        {
            "name": "AWS::QLDB",
            "resourceTypes": [
                "AWS::QLDB::Ledger",
                "AWS::QLDB::Stream"
            ]
        },
        {
            "name": "AWS::QuickSight",
            "resourceTypes": [
                "AWS::QuickSight::Analysis",
                "AWS::QuickSight::Dashboard",
                "AWS::QuickSight::DataSet",
                "AWS::QuickSight::DataSource",
                "AWS::QuickSight::RefreshSchedule",
                "AWS::QuickSight::Template",
                "AWS::QuickSight::Theme",
                "AWS::QuickSight::Topic",
                "AWS::QuickSight::VPCConnection"
            ]
        },
        {
            "name": "AWS::RAM",
            "resourceTypes": [
                "AWS::RAM::Permission",
                "AWS::RAM::ResourceShare"
            ]
        },
        {
            "name": "AWS::RDS",
            "resourceTypes": [
                "AWS::RDS::CustomDBEngineVersion",
                "AWS::RDS::DBCluster",
                "AWS::RDS::DBClusterParameterGroup",
                "AWS::RDS::DBInstance",
                "AWS::RDS::DBParameterGroup",
                "AWS::RDS::DBProxy",
                "AWS::RDS::DBProxyEndpoint",
                "AWS::RDS::DBProxyTargetGroup",
                "AWS::RDS::DBSecurityGroup",
                "AWS::RDS::DBSecurityGroupIngress",
                "AWS::RDS::DBSubnetGroup",
                "AWS::RDS::EventSubscription",
                "AWS::RDS::GlobalCluster",
                "AWS::RDS::Integration",
                "AWS::RDS::OptionGroup"
            ]
        },
        {
            "name": "AWS::Redshift",
            "resourceTypes": [
                "AWS::Redshift::Cluster",
                "AWS::Redshift::ClusterParameterGroup",
                "AWS::Redshift::ClusterSecurityGroup",
                "AWS::Redshift::ClusterSecurityGroupIngress",
                "AWS::Redshift::ClusterSubnetGroup",
                "AWS::Redshift::EndpointAccess",
                "AWS::Redshift::EndpointAuthorization",
                "AWS::Redshift::EventSubscription",
                "AWS::Redshift::ScheduledAction",
                "AWS::RedshiftServerless::Namespace",
                "AWS::RedshiftServerless::Workgroup"
            ]
        },
        {
            "name": "AWS::RefactorSpaces",
            "resourceTypes": [
                "AWS::RefactorSpaces::Application",
                "AWS::RefactorSpaces::Environment",
                "AWS::RefactorSpaces::Route",
                "AWS::RefactorSpaces::Service"
            ]
        },
        {
            "name": "AWS::Rekognition",
            "resourceTypes": [
                "AWS::Rekognition::Collection",
                "AWS::Rekognition::Project",
                "AWS::Rekognition::StreamProcessor"
            ]
        },
        {
            "name": "AWS::ResilienceHub",
            "resourceTypes": [
                "AWS::ResilienceHub::App",
                "AWS::ResilienceHub::ResiliencyPolicy"
            ]
        },
        {
            "name": "AWS::ResourceExplorer2",
            "resourceTypes": [
                "AWS::ResourceExplorer2::DefaultViewAssociation",
                "AWS::ResourceExplorer2::Index",
                "AWS::ResourceExplorer2::View"
            ]
        },
        {
            "name": "AWS::ResourceGroups",
            "resourceTypes": [
                "AWS::ResourceGroups::Group"
            ]
        },
        {
            "name": "AWS::RoboMaker",
            "resourceTypes": [
                "AWS::RoboMaker::Fleet",
                "AWS::RoboMaker::Robot",
                "AWS::RoboMaker::RobotApplication",
                "AWS::RoboMaker::RobotApplicationVersion",
                "AWS::RoboMaker::SimulationApplication",
                "AWS::RoboMaker::SimulationApplicationVersion"
            ]
        },
        {
            "name": "AWS::RolesAnywhere",
            "resourceTypes": [
                "AWS::RolesAnywhere::CRL",
                "AWS::RolesAnywhere::Profile",
                "AWS::RolesAnywhere::TrustAnchor"
            ]
        },
        {
            "name": "AWS::Route53",
            "resourceTypes": [
                "AWS::Route53::CidrCollection",
                "AWS::Route53::DNSSEC",
                "AWS::Route53::HealthCheck",
                "AWS::Route53::HostedZone",
                "AWS::Route53::KeySigningKey",
                "AWS::Route53::RecordSet",
                "AWS::Route53::RecordSetGroup",
                "AWS::Route53RecoveryControl::Cluster",
                "AWS::Route53RecoveryControl::ControlPanel",
                "AWS::Route53RecoveryControl::RoutingControl",
                "AWS::Route53RecoveryControl::SafetyRule",
                "AWS::Route53RecoveryReadiness::Cell",
                "AWS::Route53RecoveryReadiness::ReadinessCheck",
                "AWS::Route53RecoveryReadiness::RecoveryGroup",
                "AWS::Route53RecoveryReadiness::ResourceSet",
                "AWS::Route53Resolver::FirewallDomainList",
                "AWS::Route53Resolver::FirewallRuleGroup",
                "AWS::Route53Resolver::FirewallRuleGroupAssociation",
                "AWS::Route53Resolver::OutpostResolver",
                "AWS::Route53Resolver::ResolverConfig",
                "AWS::Route53Resolver::ResolverDNSSECConfig",
                "AWS::Route53Resolver::ResolverEndpoint",
                "AWS::Route53Resolver::ResolverQueryLoggingConfig",
                "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation",
                "AWS::Route53Resolver::ResolverRule",
                "AWS::Route53Resolver::ResolverRuleAssociation",
                "AWS::Route53Profiles::Profile",
                "AWS::Route53Profiles::ProfileAssociation",
                "AWS::Route53Profiles::ProfileResourceAssociation"
            ]
        },
        {
            "name": "AWS::RUM",
            "resourceTypes": [
                "AWS::RUM::AppMonitor"
            ]
        },
        {
            "name": "AWS::S3",
            "resourceTypes": [
                "AWS::S3::AccessGrant",
                "AWS::S3::AccessGrantsInstance",
                "AWS::S3::AccessGrantsLocation",
                "AWS::S3::AccessPoint",
                "AWS::S3::Bucket",
                "AWS::S3::BucketPolicy",
                "AWS::S3::MultiRegionAccessPoint",
                "AWS::S3::MultiRegionAccessPointPolicy",
                "AWS::S3::StorageLens",
                "AWS::S3::StorageLensGroup",
                "AWS::S3Express::BucketPolicy",
                "AWS::S3Express::DirectoryBucket",
                "AWS::S3ObjectLambda::AccessPoint",
                "AWS::S3ObjectLambda::AccessPointPolicy",
                "AWS::S3Outposts::AccessPoint",
                "AWS::S3Outposts::Bucket",
                "AWS::S3Outposts::BucketPolicy",
                "AWS::S3Outposts::Endpoint"
            ]
        },
        {
            "name": "AWS::SageMaker",
            "resourceTypes": [
                "AWS::SageMaker::App",
                "AWS::SageMaker::AppImageConfig",
                "AWS::SageMaker::CodeRepository",
                "AWS::SageMaker::DataQualityJobDefinition",
                "AWS::SageMaker::Device",
                "AWS::SageMaker::DeviceFleet",
                "AWS::SageMaker::Domain",
                "AWS::SageMaker::Endpoint",
                "AWS::SageMaker::EndpointConfig",
                "AWS::SageMaker::FeatureGroup",
                "AWS::SageMaker::Image",
                "AWS::SageMaker::ImageVersion",
                "AWS::SageMaker::InferenceComponent",
                "AWS::SageMaker::InferenceExperiment",
                "AWS::SageMaker::Model",
                "AWS::SageMaker::ModelBiasJobDefinition",
                "AWS::SageMaker::ModelCard",
                "AWS::SageMaker::ModelExplainabilityJobDefinition",
                "AWS::SageMaker::ModelPackage",
                "AWS::SageMaker::ModelPackageGroup",
                "AWS::SageMaker::ModelQualityJobDefinition",
                "AWS::SageMaker::MonitoringSchedule",
                "AWS::SageMaker::NotebookInstance",
                "AWS::SageMaker::NotebookInstanceLifecycleConfig",
                "AWS::SageMaker::Pipeline",
                "AWS::SageMaker::Project",
                "AWS::SageMaker::Space",
                "AWS::SageMaker::UserProfile",
                "AWS::SageMaker::Workteam"
            ]
        },
        {
            "name": "AWS::SecretsManager",
            "resourceTypes": [
                "AWS::SecretsManager::ResourcePolicy",
                "AWS::SecretsManager::RotationSchedule",
                "AWS::SecretsManager::Secret",
                "AWS::SecretsManager::SecretTargetAttachment"
            ]
        },
        {
            "name": "AWS::SecurityLake",
            "resourceTypes": [
                "AWS::SecurityLake::AwsLogSource",
                "AWS::SecurityLake::DataLake",
                "AWS::SecurityLake::Subscriber"
            ]
        },
        {
            "name": "AWS::ServiceCatalog",
            "resourceTypes": [
                "AWS::ServiceCatalog::AcceptedPortfolioShare",
                "AWS::ServiceCatalog::CloudFormationProduct",
                "AWS::ServiceCatalog::CloudFormationProvisionedProduct",
                "AWS::ServiceCatalog::LaunchNotificationConstraint",
                "AWS::ServiceCatalog::LaunchRoleConstraint",
                "AWS::ServiceCatalog::LaunchTemplateConstraint",
                "AWS::ServiceCatalog::Portfolio",
                "AWS::ServiceCatalog::PortfolioPrincipalAssociation",
                "AWS::ServiceCatalog::PortfolioProductAssociation",
                "AWS::ServiceCatalog::PortfolioShare",
                "AWS::ServiceCatalog::ResourceUpdateConstraint",
                "AWS::ServiceCatalog::ServiceAction",
                "AWS::ServiceCatalog::ServiceActionAssociation",
                "AWS::ServiceCatalog::StackSetConstraint",
                "AWS::ServiceCatalog::TagOption",
                "AWS::ServiceCatalog::TagOptionAssociation",
                "AWS::ServiceCatalogAppRegistry::Application",
                "AWS::ServiceCatalogAppRegistry::AttributeGroup",
                "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation",
                "AWS::ServiceCatalogAppRegistry::ResourceAssociation"
            ]
        },
        {
            "name": "AWS::SecurityHub",
            "resourceTypes": [
                "AWS::SecurityHub::AutomationRule",
                "AWS::SecurityHub::DelegatedAdmin",
                "AWS::SecurityHub::Hub",
                "AWS::SecurityHub::Insight",
                "AWS::SecurityHub::ProductSubscription",
                "AWS::SecurityHub::SecurityControl",
                "AWS::SecurityHub::Standard"
            ]
        },
        {
            "name": "AWS::SES",
            "resourceTypes": [
                "AWS::SES::ConfigurationSet",
                "AWS::SES::ConfigurationSetEventDestination",
                "AWS::SES::ContactList",
                "AWS::SES::DedicatedIpPool",
                "AWS::SES::EmailIdentity",
                "AWS::SES::ReceiptFilter",
                "AWS::SES::ReceiptRule",
                "AWS::SES::ReceiptRuleSet",
                "AWS::SES::Template",
                "AWS::SES::VdmAttributes"
            ]
        },
        {
            "name": "AWS::SDB",
            "resourceTypes": [
                "AWS::SDB::Domain"
            ]
        },
        {
            "name": "AWS::Shield",
            "resourceTypes": [
                "AWS::Shield::DRTAccess",
                "AWS::Shield::ProactiveEngagement",
                "AWS::Shield::Protection",
                "AWS::Shield::ProtectionGroup"
            ]
        },
        {
            "name": "AWS::Signer",
            "resourceTypes": [
                "AWS::Signer::ProfilePermission",
                "AWS::Signer::SigningProfile"
            ]
        },
        {
            "name": "AWS::SimSpaceWeaver",
            "resourceTypes": [
                "AWS::SimSpaceWeaver::Simulation"
            ]
        },
        {
            "name": "AWS::SNS",
            "resourceTypes": [
                "AWS::SNS::Subscription",
                "AWS::SNS::Topic",
                "AWS::SNS::TopicInlinePolicy",
                "AWS::SNS::TopicPolicy"
            ]
        },
        {
            "name": "AWS::SQS",
            "resourceTypes": [
                "AWS::SQS::Queue",
                "AWS::SQS::QueueInlinePolicy",
                "AWS::SQS::QueuePolicy"
            ]
        },
        {
            "name": "AWS::StepFunctions",
            "resourceTypes": [
                "AWS::StepFunctions::Activity",
                "AWS::StepFunctions::StateMachine",
                "AWS::StepFunctions::StateMachineAlias",
                "AWS::StepFunctions::StateMachineVersion"
            ]
        },
        {
            "name": "AWS::SSM",
            "resourceTypes": [
                "AWS::SSM::Association",
                "AWS::SSM::Document",
                "AWS::SSM::MaintenanceWindow",
                "AWS::SSM::MaintenanceWindowTarget",
                "AWS::SSM::MaintenanceWindowTask",
                "AWS::SSM::Parameter",
                "AWS::SSM::PatchBaseline",
                "AWS::SSM::ResourceDataSync",
                "AWS::SSM::ResourcePolicy",
                "AWS::SSMIncidents::ReplicationSet",
                "AWS::SSMIncidents::ResponsePlan",
                "AWS::SSMContacts::Contact",
                "AWS::SSMContacts::ContactChannel",
                "AWS::SSMContacts::Plan",
                "AWS::SSMContacts::Rotation"
            ]
        },
        {
            "name": "AWS::SupportApp",
            "resourceTypes": [
                "AWS::SupportApp::AccountAlias",
                "AWS::SupportApp::SlackChannelConfiguration",
                "AWS::SupportApp::SlackWorkspaceConfiguration"
            ]
        },
        {
            "name": "AWS::SystemsManagerSAP",
            "resourceTypes": [
                "AWS::SystemsManagerSAP::Application"
            ]
        },
        {
            "name": "AWS::Timestream",
            "resourceTypes": [
                "AWS::Timestream::Database",
                "AWS::Timestream::InfluxDBInstance",
                "AWS::Timestream::ScheduledQuery",
                "AWS::Timestream::Table"
            ]
        },
        {
            "name": "AWS::Transfer",
            "resourceTypes": [
                "AWS::Transfer::Agreement",
                "AWS::Transfer::Certificate",
                "AWS::Transfer::Connector",
                "AWS::Transfer::Profile",
                "AWS::Transfer::Server",
                "AWS::Transfer::User",
                "AWS::Transfer::Workflow"
            ]
        },
        {
            "name": "AWS::VerifiedPermissions",
            "resourceTypes": [
                "AWS::VerifiedPermissions::IdentitySource",
                "AWS::VerifiedPermissions::Policy",
                "AWS::VerifiedPermissions::PolicyStore",
                "AWS::VerifiedPermissions::PolicyTemplate"
            ]
        },
        {
            "name": "AWS::VoiceID",
            "resourceTypes": [
                "AWS::VoiceID::Domain"
            ]
        },
        {
            "name": "AWS::VpcLattice",
            "resourceTypes": [
                "AWS::VpcLattice::AccessLogSubscription",
                "AWS::VpcLattice::AuthPolicy",
                "AWS::VpcLattice::Listener",
                "AWS::VpcLattice::ResourcePolicy",
                "AWS::VpcLattice::Rule",
                "AWS::VpcLattice::Service",
                "AWS::VpcLattice::ServiceNetwork",
                "AWS::VpcLattice::ServiceNetworkServiceAssociation",
                "AWS::VpcLattice::ServiceNetworkVpcAssociation",
                "AWS::VpcLattice::TargetGroup"
            ]
        },
        {
            "name": "AWS::WAF",
            "resourceTypes": [
                "AWS::WAF::ByteMatchSet",
                "AWS::WAF::IPSet",
                "AWS::WAF::Rule",
                "AWS::WAF::SizeConstraintSet",
                "AWS::WAF::SqlInjectionMatchSet",
                "AWS::WAF::WebACL",
                "AWS::WAF::XssMatchSet",
                "AWS::WAFRegional::ByteMatchSet",
                "AWS::WAFRegional::GeoMatchSet",
                "AWS::WAFRegional::IPSet",
                "AWS::WAFRegional::RateBasedRule",
                "AWS::WAFRegional::RegexPatternSet",
                "AWS::WAFRegional::Rule",
                "AWS::WAFRegional::SizeConstraintSet",
                "AWS::WAFRegional::SqlInjectionMatchSet",
                "AWS::WAFRegional::WebACL",
                "AWS::WAFRegional::WebACLAssociation",
                "AWS::WAFRegional::XssMatchSet",
                "AWS::WAFv2::IPSet",
                "AWS::WAFv2::LoggingConfiguration",
                "AWS::WAFv2::RegexPatternSet",
                "AWS::WAFv2::RuleGroup",
                "AWS::WAFv2::WebACL",
                "AWS::WAFv2::WebACLAssociation"
            ]
        },
        {
            "name": "AWS::Wisdom",
            "resourceTypes": [
                "AWS::Wisdom::Assistant",
                "AWS::Wisdom::AssistantAssociation",
                "AWS::Wisdom::KnowledgeBase"
            ]
        },
        {
            "name": "AWS::WorkSpaces",
            "resourceTypes": [
                "AWS::WorkSpaces::ConnectionAlias",
                "AWS::WorkSpaces::Workspace",
                "AWS::WorkSpacesThinClient::Environment",
                "AWS::WorkSpacesWeb::BrowserSettings",
                "AWS::WorkSpacesWeb::IdentityProvider",
                "AWS::WorkSpacesWeb::IpAccessSettings",
                "AWS::WorkSpacesWeb::NetworkSettings",
                "AWS::WorkSpacesWeb::Portal",
                "AWS::WorkSpacesWeb::TrustStore",
                "AWS::WorkSpacesWeb::UserAccessLoggingSettings",
                "AWS::WorkSpacesWeb::UserSettings"
            ]
        },
        {
            "name": "AWS::XRay",
            "resourceTypes": [
                "AWS::XRay::Group",
                "AWS::XRay::ResourcePolicy",
                "AWS::XRay::SamplingRule"
            ]
        }
    ]
}